/* TheBakingLangTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. TheBakingLangTokenManager.java */

/** Token Manager. */
public class TheBakingLangTokenManager implements TheBakingLangConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000080000L) != 0L)
         {
            jjmatchedKind = 36;
            return 20;
         }
         if ((active0 & 0x1200000L) != 0L)
         {
            jjmatchedKind = 36;
            return 47;
         }
         if ((active0 & 0x80010000L) != 0L)
         {
            jjmatchedKind = 36;
            return 8;
         }
         if ((active0 & 0x20040000L) != 0L)
         {
            jjmatchedKind = 36;
            return 15;
         }
         if ((active0 & 0x8000200L) != 0L)
         {
            jjmatchedKind = 36;
            return 28;
         }
         if ((active0 & 0x74200d480L) != 0L)
         {
            jjmatchedKind = 36;
            return 86;
         }
         if ((active0 & 0x10800000L) != 0L)
         {
            jjmatchedKind = 36;
            return 64;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 36;
            return 11;
         }
         if ((active0 & 0x8004000800L) != 0L)
         {
            jjmatchedKind = 36;
            return 24;
         }
         if ((active0 & 0x502100L) != 0L)
         {
            jjmatchedKind = 36;
            return 34;
         }
         return -1;
      case 1:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
            return 7;
         }
         if ((active0 & 0x10000080000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
            return 19;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
            return 63;
         }
         if ((active0 & 0x100100L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
            return 33;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
            return 46;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
            return 58;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
            return 14;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
            return 27;
         }
         if ((active0 & 0x100000400L) != 0L)
            return 86;
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
            return 40;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
            return 72;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
            return 10;
         }
         if ((active0 & 0x8004000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
            return 23;
         }
         if ((active0 & 0x6e200fa80L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
            return 86;
         }
         return -1;
      case 2:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
            return 26;
         }
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
            return 39;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
            return 22;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
            return 71;
         }
         if ((active0 & 0x8202e080L) != 0L)
            return 86;
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
            return 18;
         }
         if ((active0 & 0x18660001b00L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
            return 86;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
            return 62;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
            return 32;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
            return 45;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
            return 57;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
            return 6;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
            return 13;
         }
         return -1;
      case 3:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
            return 17;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
            return 61;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
            return 87;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
            return 44;
         }
         if ((active0 & 0x18640000100L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
            return 86;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
            return 56;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
            return 70;
         }
         if ((active0 & 0x24001a00L) != 0L)
            return 86;
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
            return 38;
         }
         if ((active0 & 0x8050000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
            return 88;
         }
         return -1;
      case 4:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
            return 37;
         }
         if ((active0 & 0x10640000100L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
            return 86;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
            return 69;
         }
         if ((active0 & 0x81d0000L) != 0L)
            return 86;
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
            return 43;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
            return 88;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
            return 55;
         }
         return -1;
      case 5:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 5;
            return 36;
         }
         if ((active0 & 0x600000100L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 5;
            return 86;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 5;
            return 87;
         }
         if ((active0 & 0x10000000L) != 0L)
            return 68;
         if ((active0 & 0x40800000L) != 0L)
            return 86;
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 5;
            return 54;
         }
         return -1;
      case 6:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 6;
            return 53;
         }
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 6;
            return 35;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 6;
            return 86;
         }
         if ((active0 & 0x400200100L) != 0L)
            return 86;
         return -1;
      case 7:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
            return 52;
         }
         if ((active0 & 0x400000L) != 0L)
            return 86;
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
            return 86;
         }
         return -1;
      case 8:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 8;
            return 86;
         }
         if ((active0 & 0x1000000L) != 0L)
            return 51;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 6);
      case 46:
         return jjStopAtPos(0, 5);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10800000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x502100L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80010000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x10000080000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x8004000800L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20040000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xc400L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1200000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000200L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x218201800L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x401000000L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8006400280L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 111:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 86);
         return jjMoveStringLiteralDfa2_0(active0, 0x100e0180100L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 86);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x842000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 103:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 86);
         return jjMoveStringLiteralDfa3_0(active0, 0x1040000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x10001800L);
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 86);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 86);
         return jjMoveStringLiteralDfa3_0(active0, 0x404000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000680000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 112:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 86);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 86);
         break;
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 86);
         break;
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x8800200L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 120:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 86);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 86);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 86);
         return jjMoveStringLiteralDfa4_0(active0, 0x9080000L);
      case 104:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 86);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10200000L);
      case 107:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 86);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x10200000000L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 86);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 86);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x240800000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000100L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 86);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 86);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 86);
         break;
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 86);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 103:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 68);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000100L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 86);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 86);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 86);
         break;
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 86);
         break;
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 51);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(9, 33, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 87;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 68:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 78;
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     { jjCheckNAddTwoStates(4, 1); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 35)
                        kind = 35;
                     { jjCheckNAdd(1); }
                  }
                  break;
               case 1:
                  if (curChar == 46)
                     { jjCheckNAdd(2); }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(2); }
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAddTwoStates(4, 1); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAddTwoStates(4, 1); }
                  break;
               case 79:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 40:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 27:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 71:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 35:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 110)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 55:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 23:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 43:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 108)
                     { jjCheckNAdd(31); }
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 117)
                     { jjCheckNAdd(5); }
                  break;
               case 87:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 97)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 63:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 51:
               case 86:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAdd(86); }
                  break;
               case 72:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 18:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 38:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 26:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 101)
                     { jjCheckNAdd(5); }
                  break;
               case 58:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 14:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 46:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 54:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 22:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 107)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 68:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAdd(86); }
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 103)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 88:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 114)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 62:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 64:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 83;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 63;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 121)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 37:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 47:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 57:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 97)
                     { jjCheckNAdd(5); }
                  break;
               case 45:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 8:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 33:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 53:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 98)
                     { jjAddStates(0, 2); }
                  else if (curChar == 118)
                     { jjAddStates(3, 4); }
                  else if (curChar == 99)
                     { jjAddStates(5, 6); }
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 34:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 61:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 101)
                     { jjCheckNAdd(5); }
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 36:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 69:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 79;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 56:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 24:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 44:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 70:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 80;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 111)
                     { jjCheckNAdd(31); }
                  break;
               case 52:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(86); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 5:
                  if (curChar == 114 && kind > 38)
                     kind = 38;
                  break;
               case 9:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 12:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 16:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 21:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 25:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 29:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 99)
                     { jjAddStates(5, 6); }
                  break;
               case 31:
                  if (curChar == 97 && kind > 38)
                     kind = 38;
                  break;
               case 41:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 118)
                     { jjAddStates(3, 4); }
                  break;
               case 48:
                  if (curChar == 108 && kind > 38)
                     kind = 38;
                  break;
               case 49:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 59:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 98)
                     { jjAddStates(0, 2); }
                  break;
               case 65:
                  if (curChar == 100)
                     { jjCheckNAdd(31); }
                  break;
               case 66:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 73:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 101)
                     { jjCheckNAdd(5); }
                  break;
               case 75:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 80:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(86); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 87 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\56", "\54", "\115\151\170", 
"\143\157\155\142\151\156\145", "\167\151\164\150", "\164\157", "\155\141\153\145", "\102\141\153\145", 
"\143\165\160", "\164\142\154", "\164\163\160", "\146\154\157\165\162", "\145\147\147", 
"\163\165\147\141\162", "\150\157\156\145\171", "\143\157\143\157\141", 
"\166\141\156\151\154\154\141", "\143\151\156\156\141\155\157\156", "\142\165\164\164\145\162", 
"\166\145\147\145\164\141\142\154\145", "\157\151\154", "\155\151\154\153", "\167\141\164\145\162", 
"\142\141\153\151\156\147", "\163\157\144\141", "\160\157\167\144\145\162", "\146\157\162", "\141\164", 
"\106\141\150\162\145\156\150\145\151\164", "\103\145\154\163\151\165\163", null, null, null, null, "\155\151\156\163", 
"\150\157\165\162\163", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   64, 73, 84, 47, 59, 34, 41, 
};

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public TheBakingLangTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public TheBakingLangTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 87; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1ffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[87];
    static private final int[] jjstateSet = new int[2 * 87];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
