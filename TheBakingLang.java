/* TheBakingLang.java */
/* Generated By:JavaCC: Do not edit this line. TheBakingLang.java */
public class TheBakingLang implements TheBakingLangConstants {
  public static void main(String[] args) throws Exception
  {
    try
    {
      BakedGood good;

      good = new TheBakingLang(new java.io.StringReader(args[0])).R();
      System.out.println("Enjoy your " + good);
    }
    catch (Exception e)
    {
      System.err.println(e + "  No baked good for you!");
    }
  }

  static final public BakedGood R() throws ParseException {BakedGood good;
  BakedGood next;
    good = S();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMBINE:
    case MIX:
    case BAKE:
    case LET:{
      next = R();
good.combineWith(next);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
{if ("" != null) return good;}
    throw new Error("Missing return statement in function");
}

  static final public BakedGood S() throws ParseException {Token token;
  double timeNum;
  Time timeUnits;
  double tempNum;
  Temperature tempUnits;
  BakedGood good = new BakedGood();
  String identifier1, identifier2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMBINE:{
      jj_consume_token(COMBINE);
      token = jj_consume_token(IDENTIFIER);
identifier1 = token.image;
      jj_consume_token(INTO);
      token = jj_consume_token(IDENTIFIER);
identifier2 = token.image;
      jj_consume_token(PERIOD);
System.out.println("Combined " + identifier1 + " into " + identifier2);
      break;
      }
    case MIX:{
      jj_consume_token(MIX);
      good = L();
      jj_consume_token(TO);
      jj_consume_token(MAKE);
      token = jj_consume_token(IDENTIFIER);
identifier1 = token.image;
      jj_consume_token(PERIOD);
System.out.println("Mixed ingredients to make " + identifier1);
      break;
      }
    case BAKE:{
      jj_consume_token(BAKE);
      token = jj_consume_token(IDENTIFIER);
identifier1 = token.image;
      jj_consume_token(FOR);
      token = jj_consume_token(NUMBER);
timeNum = Double.parseDouble(token.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUTES:{
        jj_consume_token(MINUTES);
timeUnits = Time.MINUTES;
        break;
        }
      case HOURS:{
        jj_consume_token(HOURS);
timeUnits = Time.HOURS;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(AT);
      token = jj_consume_token(NUMBER);
tempNum = Double.parseDouble(token.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CELSIUS:{
        jj_consume_token(CELSIUS);
tempUnits = Temperature.CELSIUS;
        break;
        }
      case FAHRENHEIT:{
        jj_consume_token(FAHRENHEIT);
tempUnits = Temperature.FAHRENHEIT;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PERIOD);
good.chooseTime(timeNum, timeUnits);
      good.chooseTemperature(tempNum, tempUnits);
      System.out.println("Baked " + identifier1 + " for " + timeNum + " " + timeUnits + " at " + tempNum + " " + tempUnits);
      break;
      }
    case LET:{
      jj_consume_token(LET);
      jj_consume_token(COOL);
      jj_consume_token(COMMA);
      jj_consume_token(THEN);
      jj_consume_token(DECORATE);
      jj_consume_token(PERIOD);
System.out.println("Let cool, then decorate.");
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return good;}
    throw new Error("Missing return statement in function");
}

  static final public BakedGood L() throws ParseException {BakedGood good = new BakedGood();
  BakedGood next;
    good = IT();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      next = L();
good.combineWith(next);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
{if ("" != null) return good;}
    throw new Error("Missing return statement in function");
}

  static final public BakedGood IT() throws ParseException {Token token;
  double quantity;
  String unit = null;
  Ingredient ingredient;
  BakedGood good = new BakedGood();
    token = jj_consume_token(NUMBER);
quantity = Double.parseDouble(token.image);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TEASPOONS:
    case TABLESPOONS:
    case CUPS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TEASPOONS:{
        jj_consume_token(TEASPOONS);
unit = "teaspoons";
        break;
        }
      case TABLESPOONS:{
        jj_consume_token(TABLESPOONS);
unit = "tablespoons";
        break;
        }
      case CUPS:{
        jj_consume_token(CUPS);
unit = "cups";
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    token = jj_consume_token(INGREDIENT);
ingredient = Ingredient.valueOf(token.image.toUpperCase().replace(" ", "_"));
    good.addIngredient(ingredient);
    System.out.println("Added " + quantity + " " + (unit != null ? unit : "") + " of " + ingredient);
{if ("" != null) return good;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TheBakingLangTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x780,0xc00000,0x3000000,0x780,0x4000000,0x380000,0x380000,};
	}

  /** Constructor with InputStream. */
  public TheBakingLang(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TheBakingLang(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new TheBakingLangTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TheBakingLang(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new TheBakingLangTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new TheBakingLangTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TheBakingLang(TheBakingLangTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TheBakingLangTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[29];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 7; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 29; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
