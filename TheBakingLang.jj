PARSER_BEGIN(TheBakingLang)

public class TheBakingLang
{
  public static void main(String[] args) throws Exception
  {
    try
    {
      BakedGood good;

      good = new TheBakingLang(new java.io.StringReader(args[0])).R();
      System.out.println("Enjoy your " + good);
    }
    catch (Exception e)
    {
      System.err.println(e + "  No baked good for you!");
    }
  }
}

PARSER_END(TheBakingLang)

SKIP:  { " " | "\t" | "\n" | "\r" }

TOKEN: {
  <PERIOD: "."> |
  <COMMA: ","> |
  <COMBINE: "combine"> |
  <MIX: "mix" |
  <BAKE: "bake"> |
  <LET: "let"> |
  <COOL: "cool"> |
  <THEN: "then"> |
  <DECORATE: "decorate"> |
  <INTO: "into"> |
  <TO: "to"> |
  <MAKE: "make"> |
  <FOR: "for"> |
  <AT: "at"> |
  <TEASPOONS: "teaspoons" | "tsp"> |
  <TABLESPOONS: "tablespoons" | "tbl"> |
  <CUPS: "cups" | "cup"> |
  <MINUTES: "minutes" | "mins"> |
  <HOURS: "hours"> |
  <CELSIUS: "celsius" | "C"> |
  <FAHRENHEIT: "fahrenheit" | "F"> |
  <NUMBER: (["0"-"9"])+ ("." (["0"-"9"])+)?> |
  <INGREDIENT: "flour" | "eggs" | "sugar" | "honey" | "cocoa" | "vanilla" | "cinnamon" | "butter" | "vegetableoil" | "milk" | "water" | "bakingsoda" | "bakingpowder"> |
  <IDENTIFIER: (["a"-"z", "A"-"Z"])+> 
}

BakedGood R() :
{
  BakedGood good;
  BakedGood next;
}
{
  good = S() [ next = R() { good.combineWith(next); } ]
  { return good; }
}

BakedGood S() :
{
  Token token;
  double timeNum;
  Time timeUnits;
  double tempNum;
  Temperature tempUnits;
  BakedGood good = new BakedGood();
  String identifier1, identifier2;
}
{
  (
    <COMBINE> token = <IDENTIFIER> { identifier1 = token.image; }
    <INTO> token = <IDENTIFIER> { identifier2 = token.image; }
    <PERIOD> { System.out.println("Combined " + identifier1 + " into " + identifier2); }
  |
    <MIX> good = L() <TO> <MAKE> token = <IDENTIFIER> { identifier1 = token.image; }
    <PERIOD> { System.out.println("Mixed ingredients to make " + identifier1); }
  |
    <BAKE> token = <IDENTIFIER> { identifier1 = token.image; }
    <FOR> token = <NUMBER> { timeNum = Double.parseDouble(token.image); }
    ( <MINUTES> { timeUnits = Time.MINUTES; } | <HOURS> { timeUnits = Time.HOURS; } )
    <AT> token = <NUMBER> { tempNum = Double.parseDouble(token.image); }
    ( <CELSIUS> { tempUnits = Temperature.CELSIUS; } | <FAHRENHEIT> { tempUnits = Temperature.FAHRENHEIT; } )
    <PERIOD> {
      good.chooseTime(timeNum, timeUnits);
      good.chooseTemperature(tempNum, tempUnits);
      System.out.println("Baked " + identifier1 + " for " + timeNum + " " + timeUnits + " at " + tempNum + " " + tempUnits);
    }
  |
    <LET> <COOL> <COMMA> <THEN> <DECORATE> <PERIOD>
    { System.out.println("Let cool, then decorate."); }
  )
  { return good; }
}

BakedGood L() :
{
  BakedGood good = new BakedGood();
  BakedGood next;
}
{
  good = IT() [ next = L() { good.combineWith(next); } ]
  { return good; }
}

BakedGood IT() :
{
  Token token;
  double quantity;
  String unit = null;
  Ingredient ingredient;
  BakedGood good = new BakedGood();
}
{
  token = <NUMBER> { quantity = Double.parseDouble(token.image); }
  (
    <TEASPOONS> { unit = "teaspoons"; }
  | <TABLESPOONS> { unit = "tablespoons"; }
  | <CUPS> { unit = "cups"; }
  )?
  token = <INGREDIENT> {
    ingredient = Ingredient.valueOf(token.image.toUpperCase().replace(" ", "_"));
    good.addIngredient(ingredient);
    System.out.println("Added " + quantity + " " + (unit != null ? unit : "") + " of " + ingredient);
  }
  { return good; }
}