PARSER_BEGIN(TheBakingLang)

public class TheBakingLang
{
  public static void main(String[] args) throws Exception
  {
    try
    {
      BakedGood good;

      good = new TheBakingLang(new java.io.StringReader(args[0])).R();
      System.out.println("Enjoy your " + good);
    }
    catch (Exception e)
    {
      System.err.println(e + "  No baked good for you!");
    }
  }
  
}

PARSER_END(TheBakingLang)

SKIP:  { " " | "\t" | "\n" | "\r" }

TOKEN: { 
  "." | "," |
  "Mix" | "combine" | "with" | "to" | "make" | "Bake" |
  "cup" | "tbl" | "tsp" |
  "for" | "at" |
  "Fahrenheit" | "Celsius" |
  <INGREDIENT: "flour" | "egg" | "sugar" | "honey" | "cocoa" | "vanilla" | "cinnamon" | "butter" | "vegetable oil" | "milk" | "water" | "baking soda" | "baking powder"> | // Define INGREDIENT token
  <NUMBER: ("0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? >  |
  <LETTER: ["A"-"Z", "a"-"z"]> |  // Define LETTER token
  <IDENTIFIER: (<LETTER>)+ >   // Correct IDENTIFIER token definition
}


BakedGood R() :
{
  BakedGood good;
}
{
  S() { good = S(); }
  { return good; }  // Return the BakedGood object
}


BakedGood S() :
{
  Token token;
  BakedGood good = new BakedGood();
  String ingredientName;
  double quantity;
  String unit = null;  // Unit is optional
  double timeNum;
  String timeUnitsStr;
  double tempNum;
  String tempUnitsStr;
}
{
  "Mix" 
  (
    token = <NUMBER> { quantity = Double.parseDouble(token.image); }
    (
      "cup" | "tbl" | "tsp"  // Unit is only needed if not an ingredient like "egg"
    )? { 
      unit = token.image;  // Assign unit, but this is optional for some ingredients
    }
    token = <INGREDIENT> { 
      ingredientName = token.image;
      
      // Print the original ingredient name
      System.out.println("Original Ingredient: " + ingredientName);

      // Check for specific two-word ingredients and add space if necessary
      if (ingredientName.equalsIgnoreCase("bakingpowder")) {
        ingredientName = "baking powder";
      } else if (ingredientName.equalsIgnoreCase("vegetableoil")) {
        ingredientName = "vegetable oil";
      } else if (ingredientName.equalsIgnoreCase("bakingsoda")) {
        ingredientName = "baking soda";
      }

      // Print the adjusted ingredient name
      System.out.println("Adjusted Ingredient: " + ingredientName);

      // Now, after adding spaces, match with the Ingredient enum
      try {
        good.addIngredient(Ingredient.valueOf(ingredientName.toUpperCase().replace(" ", "_")));
        System.out.println("Added Ingredient: " + ingredientName);
      } catch (IllegalArgumentException e) {
        System.err.println("Error: Invalid ingredient: " + ingredientName);
      }
    }
  )+
  "to" "make" <IDENTIFIER>  // Identifier is optional here for creating the name
  { 
    // Instead of setting a name, we rely on the ingredients and other details in `toString()`
    return good; 
  }
  | "Bake" token = <NUMBER> { timeNum = Double.parseDouble(token.image); }
    ( "mins" | "hours" ) { timeUnitsStr = token.image; }
    "at" token = <NUMBER> { tempNum = Double.parseDouble(token.image); }
    ( "Fahrenheit" | "Celsius" ) { tempUnitsStr = token.image; }
  {
    good.chooseTime(timeNum, Time.valueOf(timeUnitsStr.toUpperCase()));
    good.chooseTemperature(tempNum, Temperature.valueOf(tempUnitsStr.toUpperCase()));
    return good;
  }
}

